@model Hypnosis.Web.Models.ProjectDetailsModel
<style>
    .display_none {
        display: none !important;
    }

    .text-box {
        width: 600px !important;
    }

    #pp tr > *:nth-child(1) {
        display: none;
    }
</style>
<div class="form-inline form-inline-margins">



    <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label label-title" })
        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control form-control-long" } })
        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })

        @Html.HiddenFor(model => model.ID)
    </div>

</div>

@*<div class="form-inline form-inline-margins">
        <div class="form-group">
            <label>פרטי קשר</label>
        </div>
    </div>*@
<div class="form-inline form-inline-margins display_none">

    @*<div class="form-group">
            @Html.LabelFor(model => model.MainPhone, htmlAttributes: new { @class = "control-label label-normal" })
            @Html.EditorFor(model => model.MainPhone, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.MainPhone, "", new { @class = "text-danger" })

        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Phones, htmlAttributes: new { @class = "control-label label-normal" })
            @Html.EditorFor(model => model.Phones, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Phones, "", new { @class = "text-danger" })

        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label label-normal" })
            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.InMailingList, htmlAttributes: new { @class = "control-labe label-normal" })
            @Html.CheckBoxFor(model => model.InMailingList, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Person_Senior, "", new { @class = "text-danger" })
        </div>*@
</div>
@*<div class="form-inline form-inline-margins">
        <div class="form-group">
            <label>כתובת לדיוור </label>
        </div>
    </div>*@
@*<div class="form-inline form-inline-margins">

        <div class="form-group">
            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label label-normal" })
            @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })

        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Address_Comments, htmlAttributes: new { @class = "control-label label-normal"} )
            @Html.EditorFor(model => model.Address_Comments, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Address_Comments, "", new { @class = "text-danger" })

        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label label-normal" })
            @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })

        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label label-normal" })
            @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
        </div>

    </div>*@

@Html.EditorFor(model => model.ImageName, new { htmlAttributes = new { @class = "form-control" } })
@Html.EditorFor(model => model.ImageOriginalName, new { htmlAttributes = new { @class = "form-control" } })
<div class="form-inline form-inline-margins" style="min-height:100px">
    <form id="Form" name="Form" method="post">
        @Html.LabelFor(model => model.ImageName, htmlAttributes: new { @class = "control-label label-normal" })
        @*@{
                @Html.LabelFor(model => model.ImageName, htmlAttributes: new { @class = "control-label label-normal" })
                bool imageExists = false;
                var imageName = $('details_ImageName').val();
                if (Model != null)
                {
                    if (Model.ImageName != null)
                    {
                        string imageName = Model.ImageName == null ? "empty" : Model.ImageName;
                        string relPath = "/Files/GetImage?fileName=";
                        string modelImage = relPath + imageName;
                        @modelImage;

                        <img id="photo" src=@modelImage style="display:block" />
                        imageExists = true;
                    }
                }
                if (!imageExists)
                {
                    <img id="photo" src="#" style="display:none" />
                }

            }*@

        <input type="file" id="url" name="url" /><br />
        <img id="photo" src="#" style="display:block; width:200px;height:200px" />


        <script>

            var imageName = $('#details_ImageName').val();
            console.log(imageName);
            if (imageName == "") {
                $('#photo').attr('display', 'block');
            }
            else {
                $('#photo').attr('src', "/Files/GetImage?fileName=" + imageName);
                $('#photo').attr('display', 'block');
            }
            function readURL(input) {

                if (input.files && input.files[0]) {
                    var reader = new FileReader();

                    reader.onload = function (e) {
                        $('#photo').attr('src', e.target.result);
                        $('#photo').attr('display', 'block');
                    }

                    reader.readAsDataURL(input.files[0]);
                }
            }

            $("#url").change(function () {
                // alert('change');
                // readURL(this);
                //console.log(event.target.files[0]);
                var image = document.getElementById('photo');
                image.src = URL.createObjectURL(event.target.files[0]);
                $('#photo').attr('display', 'block');
            });

        </script>
    </form>
</div>

<div class="form-inline form-inline-margins">
    <div>
        @Html.LabelFor(model => model.Project_Description, htmlAttributes: new { @class = "control-label label-bold" })
        @Html.TextAreaFor(model => model.Project_Description, new { @class = "text-area-big", @rows = 25 })
    </div>
</div>



<script lang="javascript">

    tinymce.init({
        menubar: false,
        width: "100%",
        mode: "textareas",
        directionality: 'rtl',
        encoding: "xml",
        setup: function (editor) {
            editor.on("SaveContent", function (i) {
                i.content = i.content.replace(/&#39/g, "&apos");
            });
        },
        plugins: [
            "advlist directionality autolink lists link image charmap print preview anchor",
            "searchreplace visualblocks code fullscreen",
            "insertdatetime media table contextmenu paste"
        ],
        toolbar: "insertfile undo redo | styleselect | bold italic | fontsizeselect |  fontselect | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image"
    });

</script>


@*<script type="text/javascript">
        $(function () {
            $("#tblSortable").sortable();
            $("#tblLocations").dataTable();


            //{
            //        items: 'tr:not(tr:first-child)',
            //        cursor: 'pointer',
            //        axis: 'y',
            //        dropOnEmpty: false,
            //        start: function (e, ui) {
            //            ui.item.addClass("selected");
            //        },
            //        stop: function (e, ui) {
            //            ui.item.removeClass("selected");
            //        },
            //        receive: function (e, ui) {
            //            $(this).find("tbody").append(ui.item);
            //        }
            //    });
            //});
        });
    </script>

        <table id="tblLocations" class="table table-striped table-bordered dataTable no-footer" style="overflow:auto; width:70%">
            <tbody id="tblSortable">
            <tr>
                <th>ID</th>
                <th>Location</th>
                <th>Preference</th>
            </tr>
           <tr>
                <td>1</td>
           </tr>
            <tr>
                <td>2</td>
            </tr>
            <tr>
                <td>3</td>
            </tr>
           </tbody>
        </table>*@
@*<br />
    <input type="submit" value="Update Preference" />*@

