@model Hypnosis.Web.Models.PersonDetailsModel
<div class="form-inline form-inline-margins display_none">
    <div class="form-group">
        @Html.LabelFor(model => model.Person_Senior, htmlAttributes: new { @class = "control-label" })
        @Html.EditorFor(model => model.Person_Senior, new { htmlAttributes = new { @class = "form-control" } })
        @*@Html.ValidationMessageFor(model => model.Person_Senior, "", new { @class = "text-danger" })*@
    </div>
</div>
@*@Html.EditorFor(model => model.ImageName, new { htmlAttributes = new { @class = "form-control" } })
@Html.EditorFor(model => model.ImageOriginalName, new { htmlAttributes = new { @class = "form-control" } })*@



<style>
    .display_none {
        display: none !important;
    }
</style>

<div class="form-inline form-inline-margins">



    <div class="form-group">
        @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label label-normal" })
        @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label label-normal" })
        @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.Degree, htmlAttributes: new { @class = "control-label label-normal" })
        @Html.EditorFor(model => model.Degree, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Degree, "", new { @class = "text-danger" })
    </div>
</div>




<div class="form-inline form-inline-margins">

    <div class="form-group  display_none">
        @Html.LabelFor(model => model.DisplayName, htmlAttributes: new { @class = "control-label label-normal" })
        @Html.EditorFor(model => model.DisplayName, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.DisplayName, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.TZ, htmlAttributes: new { @class = "control-label label-normal" })
        @Html.EditorFor(model => model.TZ, new { htmlAttributes = new { @class = "form-control" } })
        @*@Html.ValidationMessageFor(model => model.DisplayName, "", new { @class = "text-danger" })*@
    </div>
    <div class="form-group  display_none">
        @Html.LabelFor(model => model.BirthDate, htmlAttributes: new { @class = "control-label label-normal" })
        @Html.EditorFor(model => model.BirthDate, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })
    </div>



</div>

@*<div class="form-inline form-inline-margins">
        <div class="form-group">
        </div>
    </div>*@
<div class="form-inline form-inline-margins">

    <div class="form-group">
        @Html.LabelFor(model => model.Mobile, htmlAttributes: new { @class = "control-label label-normal" })
        @Html.EditorFor(model => model.Mobile, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Mobile, "", new { @class = "text-danger" })

    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Phones, htmlAttributes: new { @class = "control-label label-normal" })
        @Html.EditorFor(model => model.Phones, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Phones, "", new { @class = "text-danger" })

    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label label-normal" })
        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
    </div>
    <div class="form-group display_none">
        @Html.LabelFor(model => model.InMailingList, htmlAttributes: new { @class = "control-label label-normal" })
        @Html.CheckBoxFor(model => model.InMailingList, new { htmlAttributes = new { @class = "form-control" } })
        @*@Html.ValidationMessageFor(model => model.Person_Senior, "", new { @class = "text-danger" })*@
    </div>
</div>
<div class="form-group">

    @Html.EditorFor(model => model.ImageName, new { htmlAttributes = new { @class = "form-control" } })
    @Html.EditorFor(model => model.ImageOriginalName, new { htmlAttributes = new { @class = "form-control" } })
    @*@Html.ValidationMessageFor(model => model.Person_Senior, "", new { @class = "text-danger" })*@
</div>
<div class="form-inline form-inline-margins" style="min-height:100px">
    <form id="Form" name="Form" method="post">
        @Html.LabelFor(model => model.ImageName, htmlAttributes: new { @class = "control-label label-normal" })
        @*@{
            @Html.LabelFor(model => model.ImageName, htmlAttributes: new { @class = "control-label label-normal" })
            bool imageExists = false;
            var imageName = $('details_ImageName').val();
            if (Model != null)
            {
                if (Model.ImageName != null)
                {
                    string imageName = Model.ImageName == null ? "empty" : Model.ImageName;
                    string relPath = "/Files/GetImage?fileName=";
                    string modelImage = relPath + imageName;
                    @modelImage;

                    <img id="photo" src=@modelImage style="display:block" />
                    imageExists = true;
                }
            }
            if (!imageExists)
            {
                <img id="photo" src="#" style="display:none" />
            }

        }*@

        <input type="file" id="url" name="url" /><br />
        <img id="photo" src="#" style="display:block" />


        <script>

            var imageName = $('#details_ImageName').val();
            console.log(imageName);
            if (imageName == "") {
                $('#photo').attr('display', 'block');
            }
            else {
                $('#photo').attr('src', "/Files/GetImage?fileName=" + imageName);
                $('#photo').attr('display', 'block');
            }
            function readURL(input) {

                if (input.files && input.files[0]) {
                    var reader = new FileReader();

                    reader.onload = function (e) {
                        $('#photo').attr('src', e.target.result);
                        $('#photo').attr('display', 'block');
                    }

                    reader.readAsDataURL(input.files[0]);
                }
            }

            $("#url").change(function () {
                // alert('change');
                // readURL(this);
                //console.log(event.target.files[0]);
                var image = document.getElementById('photo');
                image.src = URL.createObjectURL(event.target.files[0]);
                $('#photo').attr('display', 'block');
            });

        </script>
    </form>
</div>

<div class="form-inline form-inline-margins display_none">

    <div class="form-group ">
        @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label label-normal" })
        @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })

    </div>

    @*<div class="form-group">
            @Html.LabelFor(model => model.Address_Comments, htmlAttributes: new { @class = "control-label label-normal" })
            @Html.EditorFor(model => model.Address_Comments, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Address_Comments, "", new { @class = "text-danger" })

        </div>*@

    <div class="form-group ">
        @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label label-normal" })
        @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })

    </div>

    <div class="form-group ">
        @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label label-normal" })
        @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
    </div>

</div>
<div class="form-inline form-inline-margins display_none ">
    <div class="form-group">
        <label>רשיונות</label>
    </div>
</div>
<table>
    <tr rowspan="5">
        <td>
            <div class="form-inline form-inline-margins display_none">

                <div class="form-group ">

                    @Html.LabelFor(model => model.Ministry_CaseNumber, htmlAttributes: new { @class = "control-label label-normal-one" })
                    @Html.EditorFor(model => model.Ministry_CaseNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Ministry_CaseNumber, "", new { @class = "text-danger" })

                </div>
            </div>

            <div class="form-inline form-inline-margins display_none">
                <div class="form-group">
                    <label class="label-title">פסיכולוגיה</label>
                </div>
                <div class="form-group ">

                    @Html.LabelFor(model => model.Psyhology_LicenseNumber, htmlAttributes: new { @class = "control-label label-normal" })
                    @Html.EditorFor(model => model.Psyhology_LicenseNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Psyhology_LicenseNumber, "", new { @class = "text-danger" })

                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Psyhology_Specialization, htmlAttributes: new { @class = "control-label label-normal" })
                    @Html.EditorFor(model => model.Psyhology_Specialization, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Psyhology_Specialization, "", new { @class = "text-danger" })

                </div>

            </div>

            <div class="form-inline form-inline-margins display_none">
                <div class="form-group">
                    <label class="label-title">רפואה</label>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Medicine_LicenseNumber, htmlAttributes: new { @class = "control-label label-normal" })
                    @Html.EditorFor(model => model.Medicine_LicenseNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Medicine_LicenseNumber, "", new { @class = "text-danger" })

                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Medicine_Specialization, htmlAttributes: new { @class = "control-label label-normal" })
                    @Html.EditorFor(model => model.Medicine_Specialization, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Medicine_Specialization, "", new { @class = "text-danger" })

                </div>

            </div>
            <div class="form-inline form-inline-margins display_none">
                <div class="form-group display_none">
                    <label class="label-title">רפואת שיניים</label>
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Stomatology_LicenseNumber, htmlAttributes: new { @class = "control-label label-normal" })
                    @Html.EditorFor(model => model.Stomatology_LicenseNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Stomatology_LicenseNumber, "", new { @class = "text-danger" })

                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Stomatology_Specialization, htmlAttributes: new { @class = "control-label label-normal" })
                    @Html.EditorFor(model => model.Stomatology_Specialization, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Stomatology_Specialization, "", new { @class = "text-danger" })

                </div>

            </div>
        </td>

        <td>

            <div class="form-inline form-inline-margins">
                <div class="form-group">
                    @Html.LabelFor(model => model.Person_Comments, htmlAttributes: new { @class = "control-label label-bold" })
                    @Html.TextAreaFor(model => model.Person_Comments, new { @class = "form-control", @rows = 20, @cols = 100 })
                </div>
                <br />
                <div class="form-group">
                    @Html.LabelFor(model => model.Address_Comments, htmlAttributes: new { @class = "control-label label-bold" })
                    @Html.TextAreaFor(model => model.Address_Comments, new { @class = "form-control", @rows = 20, @cols = 100 })
                </div>

            </div>
        </td>
        <td>
</table>
<script lang="javascript">
    tinymce.init({
        menubar: false,
        width: "100%",
        mode: "textareas",
        directionality: 'rtl',
        encoding: "xml",
        setup: function (editor) {
            editor.on("SaveContent", function (i) {
                i.content = i.content.replace(/&#39/g, "&apos");
            });
        },
        plugins: [
            "advlist directionality autolink lists link image charmap print preview anchor",
            "searchreplace visualblocks code fullscreen",
            "insertdatetime media table contextmenu paste"
        ],
        toolbar: "insertfile undo redo | styleselect | bold italic | fontsizeselect |  fontselect | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image"
    });

</script>
