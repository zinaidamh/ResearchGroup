@model Hypnosis.Web.Models.PersonEditModel

@{
    ViewBag.Title = "כרטיס אדם";
}

<h2>@ViewBag.Title</h2>

@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

   
      
        @Html.ValidationSummary(true)
        @Html.HiddenFor(model => model.details.ID)
        @Html.HiddenFor(model => model.filter.Type_ID)
        @Html.HiddenFor(model => model.filter.SubType_ID)
        @Html.HiddenFor(model => model.filter.InMailingListOnly)





    <div class="panel panel-default ">
        <div class="panel-body">
            <div class="form-inline form-inline-margins">
                <div class="form-group">
                    @Html.LabelFor(model => model.details.Person_Senior, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.details.Person_Senior, new { htmlAttributes = new { @class = "form-control" } })
                    @*@Html.ValidationMessageFor(model => model.details.Person_Senior, "", new { @class = "text-danger" })*@
                </div>
            </div>
            <div class="form-inline form-inline-margins">


                <div class="form-group">
                    @Html.LabelFor(model => model.details.Degree, htmlAttributes: new { @class = "control-label label-normal" })
                    @Html.EditorFor(model => model.details.Degree, new { htmlAttributes = new { @class = "form-control" } })
                    @*@Html.ValidationMessageFor(model => model.details.Degree, "", new { @class = "text-danger" })*@
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.details.FirstName, htmlAttributes: new { @class = "control-label label-normal" })
                    @Html.EditorFor(model => model.details.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                    @*@Html.ValidationMessageFor(model => model.details.FirstName, "", new { @class = "text-danger" })*@
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.details.LastName, htmlAttributes: new { @class = "control-label label-normal" })
                    @Html.EditorFor(model => model.details.LastName, new { htmlAttributes = new { @class = "form-control" } })
                    @*@Html.ValidationMessageFor(model => model.details.LastName, "", new { @class = "text-danger" })*@
                </div>
            </div>
            <div class="form-inline form-inline-margins">

                <div class="form-group">
                    @Html.LabelFor(model => model.details.DisplayName, htmlAttributes: new { @class = "control-label label-normal" })
                    @Html.EditorFor(model => model.details.DisplayName, new { htmlAttributes = new { @class = "form-control" } })
                    @*@Html.ValidationMessageFor(model => model.details.DisplayName, "", new { @class = "text-danger" })*@
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.details.TZ, htmlAttributes: new { @class = "control-label label-normal" })
                    @Html.EditorFor(model => model.details.TZ, new { htmlAttributes = new { @class = "form-control" } })
                    @*@Html.ValidationMessageFor(model => model.details.DisplayName, "", new { @class = "text-danger" })*@
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.details.BirthDate, htmlAttributes: new { @class = "control-label label-normal" })
                    @Html.EditorFor(model => model.details.BirthDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.details.BirthDate, "", new { @class = "text-danger" })
                </div>



            </div>

            <div class="form-inline form-inline-margins">
                <div class="form-group">
                    <label>פרטי קשר</label>
                </div>
            </div>
            <div class="form-inline form-inline-margins">

                <div class="form-group">
                    @Html.LabelFor(model => model.details.Mobile, htmlAttributes: new { @class = "control-label label-normal" })
                    @Html.EditorFor(model => model.details.Mobile, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.details.Mobile, "", new { @class = "text-danger" })

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.details.Phones, htmlAttributes: new { @class = "control-label label-normal" })
                    @Html.EditorFor(model => model.details.Phones, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.details.Phones, "", new { @class = "text-danger" })

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.details.Email, htmlAttributes: new { @class = "control-label label-normal" })
                    @Html.EditorFor(model => model.details.Email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.details.Email, "", new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.details.InMailingList, htmlAttributes: new { @class = "control-labe label-normal" })
                    @Html.CheckBoxFor(model => model.details.InMailingList.Value, new { htmlAttributes = new { @class = "form-control" } })
                    @*@Html.ValidationMessageFor(model => model.details.Person_Senior, "", new { @class = "text-danger" })*@
                </div>
            </div>
            <div class="form-inline form-inline-margins">

                <div class="form-group">
                    @Html.LabelFor(model => model.details.Address, htmlAttributes: new { @class = "control-label label-normal" })
                    @Html.EditorFor(model => model.details.Address, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.details.Address, "", new { @class = "text-danger" })

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.details.City, htmlAttributes: new { @class = "control-label label-normal" })
                    @Html.EditorFor(model => model.details.City, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.details.City, "", new { @class = "text-danger" })

                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.details.ZipCode, htmlAttributes: new { @class = "control-label label-normal" })
                    @Html.EditorFor(model => model.details.ZipCode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.details.ZipCode, "", new { @class = "text-danger" })
                </div>

            </div>
            <div class="form-inline form-inline-margins">
                <div class="form-group">
                    <label>רשיונות</label>
            </div>
            </div>
                    <table>
                        <tr rowspan="5">
                            <td>
                                <div class="form-inline form-inline-margins">

                                    <div class="form-group">

                                        @Html.LabelFor(model => model.details.Ministry_CaseNumber, htmlAttributes: new { @class = "control-label label-normal-one" })
                                        @Html.EditorFor(model => model.details.Ministry_CaseNumber, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.details.Ministry_CaseNumber, "", new { @class = "text-danger" })

                                    </div>
                                </div>

                                <div class="form-inline form-inline-margins">
                                    <div class="form-group">
                                        <label class="label-title">פסיכולוגיה</label>
                                    </div>
                                    <div class="form-group">

                                        @Html.LabelFor(model => model.details.Psyhology_LicenseNumber, htmlAttributes: new { @class = "control-label label-normal" })
                                        @Html.EditorFor(model => model.details.Psyhology_LicenseNumber, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.details.Psyhology_LicenseNumber, "", new { @class = "text-danger" })

                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.details.Psyhology_Specialization, htmlAttributes: new { @class = "control-label label-normal" })
                                        @Html.EditorFor(model => model.details.Psyhology_Specialization, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.details.Psyhology_Specialization, "", new { @class = "text-danger" })

                                    </div>

                                </div>

                                <div class="form-inline form-inline-margins">
                                    <div class="form-group">
                                        <label class="label-title">רפואה</label>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.details.Medicine_LicenseNumber, htmlAttributes: new { @class = "control-label label-normal" })
                                        @Html.EditorFor(model => model.details.Medicine_LicenseNumber, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.details.Medicine_LicenseNumber, "", new { @class = "text-danger" })

                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.details.Medicine_Specialization, htmlAttributes: new { @class = "control-label label-normal" })
                                        @Html.EditorFor(model => model.details.Medicine_Specialization, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.details.Medicine_Specialization, "", new { @class = "text-danger" })

                                    </div>

                                </div>
                                <div class="form-inline form-inline-margins">
                                    <div class="form-group">
                                        <label class="label-title">רפואת שיניים</label>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.details.Stomatology_LicenseNumber, htmlAttributes: new { @class = "control-label label-normal" })
                                        @Html.EditorFor(model => model.details.Stomatology_LicenseNumber, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.details.Stomatology_LicenseNumber, "", new { @class = "text-danger" })

                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.details.Stomatology_Specialization, htmlAttributes: new { @class = "control-label label-normal" })
                                        @Html.EditorFor(model => model.details.Stomatology_Specialization, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.details.Stomatology_Specialization, "", new { @class = "text-danger" })

                                    </div>

                                </div>
                            </td>

                            <td>

                                <div class="form-inline form-inline-margins">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.details.Person_Comments, htmlAttributes: new { @class = "control-label label-bold" })
                                        @Html.TextAreaFor(model => model.details.Person_Comments, new { @class = "form-control", @rows = 5, @cols = 6 })
                                    </div>
                                </div>
                            </td>
                            <td>
                    </table>
                    <div class="form-inline">

                        <div class="form-group">

                            <input type="submit" value="שמור" class="btn btn-default" />

                        </div>
                    </div>
                </div>
            </div>


            }





            @*<div class="form-inline">

                </div>
            </div>*@


            @*<div class="form-group">
                @Html.LabelFor(model => model.Mobile2, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Mobile2, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Mobile2, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Phone2, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Phone2, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Phone2, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.PasswordFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.CityId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CityId)
                    @Html.ValidationMessageFor(model => model.CityId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Street, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Street, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Street, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.HouseNumber, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.HouseNumber, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.HouseNumber, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Filled101, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.Filled101)
                        @Html.ValidationMessageFor(model => model.Filled101, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.GeoZoneId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.GeoZoneId)
                    @Html.ValidationMessageFor(model => model.GeoZoneId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.SecondaryZoneId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.SecondaryZoneId)
                    @Html.ValidationMessageFor(model => model.SecondaryZoneId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.GenderId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.GenderId)
                    @Html.ValidationMessageFor(model => model.GenderId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.BirthDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.BirthDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.WorkStartDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.WorkStartDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.WorkStartDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.WorkEndDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.WorkEndDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.WorkEndDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.BankName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.BankName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.BankName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.BankBranch, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.BankBranch, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.BankBranch, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.BankAccount, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.BankAccount, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.BankAccount, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.EducationTypeId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.EducationTypeId)
                    @Html.ValidationMessageFor(model => model.EducationTypeId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.WorkerTypeId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.WorkerTypeId)
                    @Html.ValidationMessageFor(model => model.WorkerTypeId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.HP, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.HP, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.HP, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ChildsCount, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ChildsCount, new { htmlAttributes = new { @class = "form-control", @type = "" } })
                    @Html.ValidationMessageFor(model => model.ChildsCount, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.FamilyStatusId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.FamilyStatusId)
                    @Html.ValidationMessageFor(model => model.FamilyStatusId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ShirtSize, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ShirtSize, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ShirtSize, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Vehicle, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.Vehicle)
                        @Html.ValidationMessageFor(model => model.Vehicle, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.SectorId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.SectorId)
                    @Html.ValidationMessageFor(model => model.SectorId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.HonestDiploma, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.HonestDiploma)
                        @Html.ValidationMessageFor(model => model.HonestDiploma, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            @if (Model.EmployeeJobId == 2)
            {
                <div class="form-group">
                    @Html.LabelFor(model => model.DirectManagerId, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.DirectManagerId)
                        @Html.ValidationMessageFor(model => model.DirectManagerId, "", new { @class = "text-danger" })
                    </div>
                </div>
            }

            <h4>כתובת למכתבים</h4>

            <div class="form-group">
                @Html.LabelFor(model => model.CityMailId, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CityMailId)
                    @Html.ValidationMessageFor(model => model.CityMailId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.StreetMail, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.StreetMail, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.StreetMail, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.HouseNumberMail, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.HouseNumberMail, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.HouseNumberMail, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ZipCodeMail, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ZipCodeMail, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ZipCodeMail, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Remarks, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.Remarks, new { htmlAttributes = new { @class = "form-control tmce" } })
                    @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Education, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.Education, new { htmlAttributes = new { @class = "form-control tmce" } })
                    @Html.ValidationMessageFor(model => model.Education, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PictureFileName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PostedPictureFile, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.PictureFileName, "", new { @class = "text-danger" })
                    @if (Model.PictureFileName != "NULL")
                    {
                        <a href='@Url.Action("Get", "Files", new { fileName = Model.PictureFileName })'>@Model.PictureFileName</a>
                    }
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ResumeFileName, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.PostedResumeFile, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ResumeFileName, "", new { @class = "text-danger" })
                    @if (Model.ResumeFileName != "NULL")
                    {
                        <a href='@Url.Action("Get", "Files", new { fileName = Model.ResumeFileName })'>@Model.ResumeFileName</a>
                    }
                </div>
            </div>*@




            @*<div class="form-horizontal">
                <div class="form-group">
                    @if (Model.ConnectedEmployeeId.HasValue)
                    {
                        <div class="col-md-offset-2 col-md-10">
                            @Html.ActionLink("כרטיס מדריך", "Edit", "Guides", new { Id = Model.ConnectedEmployeeId.Value }, new { @class = "btn btn-default" })
                        </div>
                    }
                    else
                    {
                        <div class="col-md-offset-2 col-md-10">
                            @Html.ActionLink("צור מדריך", "Create", "Guides", new { Id = Model.Id }, new { @class = "btn btn-default" })
                        </div>
                    }
                </div>
            </div>*@

            @*<div>
                @Html.ActionLink("חזרה לרשימה", "Index", new { statusId = Model.Filter.StatusId, managerId = Model.Filter.ManagerId, jobId = Model.Filter.FilterJobId })
            </div>*@

            @section Scripts{

                @*<script>
                    $(function () {
                        var jobSelect = $('#@Html.FieldIdFor(f => f.EmployeeJobId)').select2({
                            width: 200,
                            placeholder: "לא בוצעה בחירה",
                            allowClear: true,
                            initSelection: function (element, callback) {
                                $.ajax({
                                    url: '@Url.Content("~/JsonResults/JobsInitJson")',
                                    type: "GET",
                                    data: { value: $(element).val() },
                                    dataType: "json"
                                }).done(function (data) {
                                    if (data && data.length == 1) {
                                        callback(data[0]);
                                    }
                                });
                            },
                            ajax: {
                                url: '@Url.Content("~/JsonResults/GetJobsWithoutJobJson")',
                                dataType: "json",
                                data: function (term, page) {
                                    return {
                                        jobId: 1,
                                        q: term, // search term
                                        page: page,
                                        page_limit: 10,
                                        val: this.val()
                                    };
                                },
                                results: function (data, page) {
                                    return {
                                        results: $.map(data.results, function (a) { return { id: a.id, text: a.text } })
                                    };
                                }
                            }
                        });

                        var citySelect = $('#@Html.FieldIdFor(f => f.CityId)').select2({
                            width: 200,
                            placeholder: "לא בוצעה בחירה",
                            allowClear: true,
                            initSelection: function (element, callback) {
                                $.ajax({
                                    url: '@Url.Content("~/JsonResults/CitiesInitJson")',
                                    type: "GET",
                                    data: { value: $(element).val() },
                                    dataType: "json"
                                }).done(function (data) {
                                    if (data && data.length == 1) {
                                        callback(data[0]);
                                    }
                                });
                            },
                            ajax: {
                                url: '@Url.Content("~/JsonResults/GetCitiesJson")',
                                dataType: "json",
                                data: function (term, page) {
                                    return {
                                        q: term, // search term
                                        page: page,
                                        page_limit: 10,
                                        val: this.val()
                                    };
                                },
                                results: function (data, page) {
                                    return {
                                        results: $.map(data.results, function (a) { return { id: a.id, text: a.text } })
                                    };
                                }
                            }
                        });

                        var geoZoneSelect = $('#@Html.FieldIdFor(f => f.GeoZoneId)').select2({
                            width: 200,
                            placeholder: "לא בוצעה בחירה",
                            allowClear: true,
                            initSelection: function (element, callback) {
                                $.ajax({
                                    url: '@Url.Content("~/JsonResults/GeoZonesInitJson")',
                                    type: "GET",
                                    data: { value: $(element).val() },
                                    dataType: "json"
                                }).done(function (data) {
                                    if (data && data.length == 1) {
                                        callback(data[0]);
                                    }
                                });
                            },
                            ajax: {
                                url: '@Url.Content("~/JsonResults/GetGeoZonesJson")',
                                dataType: "json",
                                data: function (term, page) {
                                    return {
                                        q: term, // search term
                                        page: page,
                                        page_limit: 10,
                                        val: this.val()
                                    };
                                },
                                results: function (data, page) {
                                    return {
                                        results: $.map(data.results, function (a) { return { id: a.id, text: a.text } })
                                    };
                                }
                            }
                        });

                        var secondaryZoneSelect = $('#@Html.FieldIdFor(f => f.SecondaryZoneId)').select2({
                            width: 200,
                            placeholder: "לא בוצעה בחירה",
                            allowClear: true,
                            initSelection: function (element, callback) {
                                $.ajax({
                                    url: '@Url.Content("~/JsonResults/SecondaryZonesInitJson")',
                                    type: "GET",
                                    data: { value: $(element).val() },
                                    dataType: "json"
                                }).done(function (data) {
                                    if (data && data.length == 1) {
                                        callback(data[0]);
                                    }
                                });
                            },
                            ajax: {
                                url: '@Url.Content("~/JsonResults/GetSecondaryZonesJson")',
                                dataType: "json",
                                data: function (term, page) {
                                    return {
                                        zoneId: geoZoneSelect.select2('val'),
                                        q: term, // search term
                                        page: page,
                                        page_limit: 10,
                                        val: this.val()
                                    };
                                },
                                results: function (data, page) {
                                    return {
                                        results: $.map(data.results, function (a) { return { id: a.id, text: a.text } })
                                    };
                                }
                            }
                        });

                        var genderSelect = $('#@Html.FieldIdFor(f => f.GenderId)').select2({
                            width: 200,
                            placeholder: "לא בוצעה בחירה",
                            allowClear: true,
                            initSelection: function (element, callback) {
                                var data = { results: [] };
                                switch ($(element).val()) {
                                    case "0": data.results.push({ id: $(element).val(), text: "זכר" });
                                        callback(data.results[0]);
                                    case "1": data.results.push({ id: $(element).val(), text: "נקבה" });
                                        callback(data.results[0]);
                                }

                            },
                            query: function (query) {
                                var data = { results: [] };
                                data.results.push({ id: 0, text: "זכר" });
                                data.results.push({ id: 1, text: "נקבה" });
                                query.callback(data);
                            }
                        });

                        var educationTypeSelect = $('#@Html.FieldIdFor(f => f.EducationTypeId)').select2({
                            width: 200,
                            placeholder: "לא בוצעה בחירה",
                            allowClear: true,
                            initSelection: function (element, callback) {
                                $.ajax({
                                    url: '@Url.Content("~/JsonResults/EducationTypesInitJson")',
                                    type: "GET",
                                    data: { value: $(element).val() },
                                    dataType: "json"
                                }).done(function (data) {
                                    if (data && data.length == 1) {
                                        callback(data[0]);
                                    }
                                });
                            },
                            ajax: {
                                url: '@Url.Content("~/JsonResults/GetEducationTypesJson")',
                                dataType: "json",
                                data: function (term, page) {
                                    return {
                                        q: term, // search term
                                        page: page,
                                        page_limit: 10,
                                        val: this.val()
                                    };
                                },
                                results: function (data, page) {
                                    return {
                                        results: $.map(data.results, function (a) { return { id: a.id, text: a.text } })
                                    };
                                }
                            }
                        });

                        var workerTypeSelect = $('#@Html.FieldIdFor(f => f.WorkerTypeId)').select2({
                            width: 200,
                            placeholder: "לא בוצעה בחירה",
                            allowClear: true,
                            initSelection: function (element, callback) {
                                $.ajax({
                                    url: '@Url.Content("~/JsonResults/WorkerTypesInitJson")',
                                    type: "GET",
                                    data: { value: $(element).val() },
                                    dataType: "json"
                                }).done(function (data) {
                                    if (data && data.length == 1) {
                                        callback(data[0]);
                                    }
                                });
                            },
                            ajax: {
                                url: '@Url.Content("~/JsonResults/GetWorkerTypesJson")',
                                dataType: "json",
                                data: function (term, page) {
                                    return {
                                        q: term, // search term
                                        page: page,
                                        page_limit: 10,
                                        val: this.val()
                                    };
                                },
                                results: function (data, page) {
                                    return {
                                        results: $.map(data.results, function (a) { return { id: a.id, text: a.text } })
                                    };
                                }
                            }
                        });

                        var familyStatusSelect = $('#@Html.FieldIdFor(f => f.FamilyStatusId)').select2({
                            width: 200,
                            initSelection: function (element, callback) {
                                var data = { results: [] };
                                switch ($(element).val()) {
                                    case "0": data.results.push({ id: $(element).val(), text: "רווק" });
                                        callback(data.results[0]);
                                    case "1": data.results.push({ id: $(element).val(), text: "נשוי" });
                                        callback(data.results[0]);
                                    case "2": data.results.push({ id: $(element).val(), text: "גרוש" });
                                        callback(data.results[0]);
                                    case "3": data.results.push({ id: $(element).val(), text: "אלמן" });
                                        callback(data.results[0]);
                                }

                            },
                            query: function (query) {
                                var data = { results: [] };
                                data.results.push({ id: 0, text: "רווק" });
                                data.results.push({ id: 1, text: "נשוי" });
                                data.results.push({ id: 2, text: "גרוש" });
                                data.results.push({ id: 3, text: "אלמן" });
                                query.callback(data);
                            }
                        });

                        var sectorSelect = $('#@Html.FieldIdFor(f => f.SectorId)').select2({
                            width: 200,
                            placeholder: "לא בוצעה בחירה",
                            allowClear: true,
                            initSelection: function (element, callback) {
                                $.ajax({
                                    url: '@Url.Content("~/JsonResults/SectorsInitJson")',
                                    type: "GET",
                                    data: { value: $(element).val() },
                                    dataType: "json"
                                }).done(function (data) {
                                    if (data && data.length == 1) {
                                        callback(data[0]);
                                    }
                                });
                            },
                            ajax: {
                                url: '@Url.Content("~/JsonResults/GetSectorsJson")',
                                dataType: "json",
                                data: function (term, page) {
                                    return {
                                        q: term, // search term
                                        page: page,
                                        page_limit: 10,
                                        val: this.val()
                                    };
                                },
                                results: function (data, page) {
                                    return {
                                        results: $.map(data.results, function (a) { return { id: a.id, text: a.text } })
                                    };
                                }
                            }
                        });

                        var cityMailSelect = $('#@Html.FieldIdFor(f => f.CityMailId)').select2({
                            width: 200,
                            placeholder: "לא בוצעה בחירה",
                            allowClear: true,
                            initSelection: function (element, callback) {
                                $.ajax({
                                    url: '@Url.Content("~/JsonResults/CitiesInitJson")',
                                    type: "GET",
                                    data: { value: $(element).val() },
                                    dataType: "json"
                                }).done(function (data) {
                                    if (data && data.length == 1) {
                                        callback(data[0]);
                                    }
                                });
                            },
                            ajax: {
                                url: '@Url.Content("~/JsonResults/GetCitiesJson")',
                                dataType: "json",
                                data: function (term, page) {
                                    return {
                                        q: term, // search term
                                        page: page,
                                        page_limit: 10,
                                        val: this.val()
                                    };
                                },
                                results: function (data, page) {
                                    return {
                                        results: $.map(data.results, function (a) { return { id: a.id, text: a.text } })
                                    };
                                }
                            }
                        });

                        var managerSelect = $('#@Html.FieldIdFor(f => f.DirectManagerId)').select2({
                            width: 200,
                            placeholder: "לא בוצעה בחירה",
                            allowClear: true,
                            initSelection: function (element, callback) {
                                $.ajax({
                                    url: '@Url.Content("~/JsonResults/EmployeesInitJson")',
                                    type: "GET",
                                    data: { value: $(element).val() },
                                    dataType: "json"
                                }).done(function (data) {
                                    if (data && data.length == 1) {
                                        callback(data[0]);
                                    }
                                });
                            },
                            ajax: {
                                url: '@Url.Content("~/JsonResults/GetEmployeesWithoutJobJson")',
                                dataType: "json",
                                data: function (term, page) {
                                    return {
                                        jobId: 1,
                                        q: term, // search term
                                        page: page,
                                        page_limit: 10,
                                        val: this.val()
                                    };
                                },
                                results: function (data, page) {
                                    return {
                                        results: $.map(data.results, function (a) { return { id: a.id, text: a.text } })
                                    };
                                }
                            }
                        });

                        var trainingManagerSelect = $('#@Html.FieldIdFor(f => f.TrainingManagerId)').select2({
                            width: 200,
                            placeholder: "לא בוצעה בחירה",
                            allowClear: true,
                            initSelection: function (element, callback) {
                                $.ajax({
                                    url: '@Url.Content("~/JsonResults/EmployeesInitJson")',
                                    type: "GET",
                                    data: { value: $(element).val() },
                                    dataType: "json"
                                }).done(function (data) {
                                    if (data && data.length == 1) {
                                        callback(data[0]);
                                    }
                                });
                            },
                            ajax: {
                                url: '@Url.Content("~/JsonResults/GetEmployeesJson")',
                                dataType: "json",
                                data: function (term, page) {
                                    return {
                                        jobId: 5,
                                        statusId: 0,
                                        q: term, // search term
                                        page: page,
                                        page_limit: 10,
                                        val: this.val()
                                    };
                                },
                                results: function (data, page) {
                                    return {
                                        results: $.map(data.results, function (a) { return { id: a.id, text: a.text } })
                                    };
                                }
                            }
                        });
                    });

                    tinymce.init({
                        menubar: false,
                        mode: "textareas",
                        directionality: 'rtl',
                        encoding: "xml",
                        setup: function (editor) {
                            editor.on("SaveContent", function (i) {
                                i.content = i.content.replace(/&#39/g, "&apos");
                            });
                        },
                        plugins: [
                            "advlist directionality autolink lists link image charmap print preview anchor",
                            "searchreplace visualblocks code fullscreen",
                            "insertdatetime media table contextmenu paste"
                        ],
                        toolbar: "insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image"
                    });
                </script>*@
            }
