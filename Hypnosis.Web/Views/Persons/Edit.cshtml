@model Hypnosis.Web.Models.PersonEditModel

@{
    ViewBag.Title = "כרטיס אדם";
}

<h2>@ViewBag.Title</h2>

@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()



    @Html.ValidationSummary(true)
    @Html.HiddenFor(model => model.details.ID)
    @Html.HiddenFor(model => model.filter.Type_ID)
    @Html.HiddenFor(model => model.filter.SubType_ID)
    @Html.HiddenFor(model => model.filter.InMailingListOnly)





    <div class="panel panel-default ">
        <div class="panel-body">

            @Html.EditorFor(model => model.details, "PersonDetails")
            <div class="form-inline">

                <div class="form-group">

                    <input type="submit" value="שמור" class="btn btn-default" />

                </div>
            </div>
        </div>
    </div>


    //events
    <div class="panel panel-default ">
        <div class="panel-heading">
        </div>
        <div class="panel-body">
            <div id="Filter1" class="form-inline form-inline-margins">
                <div class="form-group">
                    @Html.LabelFor(f => f.eventsFilter.EssenceOnly, htmlAttributes: new { @class = "control-label label-title" })
                    @Html.CheckBoxFor(f => f.eventsFilter.EssenceOnly)
                </div>
                <div class="form-group">
                    @Html.LabelFor(f => f.eventsFilter.Type_ID)
                    @Html.EditorFor(f => f.eventsFilter.Type_ID)
                </div>
                <div class="form-group">
                    @Html.LabelFor(f => f.eventsFilter.SubType_ID)
                    @Html.EditorFor(f => f.eventsFilter.SubType_ID)
                </div>
                <div class="form-group">
                    @Html.LabelFor(f => f.eventsFilter.fromDate)
                    @Html.EditorFor(f => f.eventsFilter.fromDate)
                </div>
                <div class="form-group">
                    @Html.LabelFor(f => f.eventsFilter.toDate)
                    @Html.EditorFor(f => f.eventsFilter.toDate)
                </div>
            </div>
            <div id="Filter2" class="form-inline">

                <div class="form-group">
                    @Html.LabelFor(f => f.eventsFilter.OpenOnly, htmlAttributes: new { @class = "control-label label-title" })
                    @Html.CheckBoxFor(f => f.eventsFilter.OpenOnly)
                </div>
                <div class="form-group">
                    @Html.LabelFor(f => f.eventsFilter.ExpiredOnly, htmlAttributes: new { @class = "control-label label-title" })
                    @Html.CheckBoxFor(f => f.eventsFilter.ExpiredOnly)
                </div>

                <div class="form-group">
                    @Html.LabelFor(f => f.eventsFilter.SiteOnly, htmlAttributes: new { @class = "control-label label-title" })
                    @Html.CheckBoxFor(f => f.eventsFilter.SiteOnly)
                </div>
                <div class="form-group">
                    @Html.LabelFor(f => f.eventsFilter.FileOnly, htmlAttributes: new { @class = "control-label label-title" })
                    @Html.CheckBoxFor(f => f.eventsFilter.FileOnly)
                </div>
            </div>
            <br />
            <table id="events" class="table table-striped table-bordered dataTable no-footer" style="overflow:auto"></table>
        </div>
        </div>

    @section Scripts{
        <script>
            $(function () {

                var person = $('#@Html.FieldIdFor(f => f.details.ID)')

                var selectType = $('#@Html.FieldIdFor(f => f.eventsFilter.Type_ID)').select2({
                    width: 200,
                    placeholder: "הכל",
                    allowClear: true,
                    initSelection: function (element, callback) {
                        $.ajax({
                            url: '@Url.Content("~/JsonResults/EventTypesInitJson")',
                            type: "GET",
                            data: { value: $(element).val() },
                            dataType: "json"
                        }).done(function (data) {
                            if (data && data.length == 1) {
                                callback(data[0]);
                            }
                        });
                    },
                    ajax: {
                        url: '@Url.Content("~/JsonResults/GetEventTypesJson_Person")',
                        dataType: "json",
                        data: function (term, page) {
                            return {
                                q: term, // search term
                                page: page,
                                page_limit: 10,
                                val: this.val()
                            };
                        },
                        results: function (data, page) {
                            return {
                                results: $.map(data.results, function (a) { return { id: a.id, text: a.text } })
                            };
                        }
                    }
                });


                var selectSubType = $('#@Html.FieldIdFor(f => f.eventsFilter.SubType_ID)').select2({
                    width: 200,
                    placeholder: "הכל",
                    allowClear: true,
                    initSelection: function (element, callback) {
                        $.ajax({
                            url: '@Url.Content("~/JsonResults/EventSubTypesInitJson")',
                            type: "GET",
                            data: { value: $(element).val() },
                            dataType: "json"
                        }).done(function (data) {
                            if (data && data.length == 1) {
                                callback(data[0]);
                            }
                        });
                    },
                    ajax: {
                        url: '@Url.Content("~/JsonResults/GetEventSubTypesJson")',
                        dataType: "json",
                        data: function (term, page) {
                            return {
                                typeId: selectType.select2('val'),
                                q: term, // search term
                                page: page,
                                page_limit: 10,
                                val: this.val()
                            };
                        },
                        results: function (data, page) {
                            return {
                                results: $.map(data.results, function (a) { return { id: a.id, text: a.text } })
                            };
                        }
                    }
                });


                var chkEssenseOnly = $('#@Html.FieldIdFor(f => f.eventsFilter.EssenceOnly)');
                var chkExpiredOnly = $('#@Html.FieldIdFor(f => f.eventsFilter.ExpiredOnly)');
                var chkOpenOnly = $('#@Html.FieldIdFor(f => f.eventsFilter.OpenOnly)');
                var chkFileOnly = $('#@Html.FieldIdFor(f => f.eventsFilter.FileOnly)');
                var chkSiteOnly = $('#@Html.FieldIdFor(f => f.eventsFilter.SiteOnly)');

                var fromDate = $('#@Html.FieldIdFor(f => f.eventsFilter.fromDate)');
                var toDate = $('#@Html.FieldIdFor(f => f.eventsFilter.toDate)');



                var oTable = $('#events');
                oTable.dataTable({
                    stateSave: true,
                    "aaSorting": [[3, 'asc']],
                    "sAjaxSource": "@Url.Action("IndexDataByPerson")",

                    "fnServerParams": function (aoData) {
                        aoData.push({ "name": "Person_ID", "value": person.val() });
                        aoData.push({ "name": "Type_ID", "value": selectType.select2('val') });
                        aoData.push({ "name": "SubType_ID", "value": selectSubType.select2('val') });
                        aoData.push({ "name": "fromDate", "value": fromDate.val() });
                        aoData.push({ "name": "toDate", "value": toDate.val() });

                        aoData.push({ "name": "EssenseOnly", "value": chkEssenseOnly.is(':checked') });
                        aoData.push({ "name": "ExpiredOnly", "value": chkExpiredOnly.is(':checked') });
                        aoData.push({ "name": "OpenOnly", "value": chkOpenOnly.is(':checked') });
                        aoData.push({ "name": "FileOnly", "value": chkFileOnly.is(':checked') });
                        aoData.push({ "name": "SiteOnly", "value": chkSiteOnly.is(':checked') });




                        console.log(aoData);
                    },
                    "fnDrawCallback": function (oSettings) {
                        if (oSettings.aoData.length == 0) {
                            oTable.closest('.dataTables_wrapper').find('.dataTables_footer, .dataTables_table_wrapper').hide();
                        }
                        else {
                            oTable.closest('.dataTables_wrapper').find('.dataTables_footer, .dataTables_table_wrapper').show();
                        }


                    },

                    "aoColumns": [




                       {
                           "mData": "FirstDate",
                           "sTitle": "תאריך אירוע תחילה",
                           "mRender": function (a) { return mRenderDate(a); },
                           "mRenderEdit": function (a, b, c) {
                               var firstDate = new Date(c.FirstDate)
                               return '<input size="8" id="firstDate" class="datepicker required" type="text"  value="' + firstDate.toString("dd/MM/yyyy") + '" />';
                           }
                       },


                         {
                             "mData": "SubType_Name",
                             "sTitle": "תת סוג ארוע ",
                             "mRenderEdit": function (a, b, c) {
                                 return '<input id="dt_subtype" class="required"  value="' + c.SubType_ID + '">';
                             }

                         },
                          {
                              "mData": "Type_Name",
                              "sTitle": " סוג ארוע ",
                              "mRenderEdit": function (a, b, c) {
                                  return '<input id="dt_type" class="required"  value="' + c.Type_ID + '">';;
                              }
                          },




                              {
                                  "mData": "Description",
                                  "sTitle": "תאור ארוע ",
                                  "mRenderEdit": function (a, b, c) {
                                      return '<input id="dt_description" class="required"  value="' + c.Description + '">';;
                                  }
                              },

                                {
                                    "mData": "Agent_Name",
                                    "sTitle": "גורם/ אמצאי הפנייה",
                                    "mRenderEdit": function (a, b, c) {
                                        return '<input id="dt_agent"   value="' + c.Agent_ID + '">';;
                                    }
                                },

                                {
                                    "mData": "ExpirationDate",
                                    "sTitle": "תאריך תוקף/סיום",
                                    "mRender": function (a) { return mRenderDate(a); },
                                    "mRenderEdit": function (a, b, c) {
                                        var expDate = new Date(c.ExpirationDate)
                                        return '<input size="8" id="expDate" class="datepicker required" type="text"  value="' + expDate.toString("dd/MM/yyyy") + '" />';
                                    }
                                },

                                {
                                    "mData": "AlertDate",
                                    "sTitle": "תאריך הקפצת התראה",
                                    "mRender": function (a) { return mRenderDate(a); },
                                    "mRenderEdit": function (a, b, c) {
                                        var alertDate = new Date(c.AlertDate)
                                        return '<input size="8" id="alertDate" class="datepicker required" type="text"  value="' + alertDate.toString("dd/MM/yyyy") + '" />';
                                    }
                                },

                                 {
                                     "mData": "strAlertDone",
                                     "sTitle": "התראה טופלה",
                                     "mRender": function (a) { return mRenderDate(a); }
                                 },

                                    {
                                        "mData": "Institute_Name",
                                        "sTitle": "מכון",
                                        "mRenderEdit": function (a, b, c) {
                                            return '<input id="dt_institute"   value="' + c.Institute_ID + '">';;
                                        }

                                    },

                                  {
                                      "mData": "FileName",
                                      "sTitle": "קובץ",
                                      "mRender": function (a, b, c) {
                                          if (c.FileName != null) {
                                              return '<a target="blank" href="' + c.FileName + '">' + c.FileName + '</a>';
                                          }
                                          else {
                                              return "";
                                          }

                                      }
                                  },

                                   {
                                       "mData": "SiteHref",
                                       "sTitle": "קישור",
                                       "mRender": function (a, b, c) {
                                           if (c.SiteHref != null) {
                                               return '<a target="blank" href="http://' + c.SiteHref + '">' + c.SiteHref + '</a>';
                                           }
                                           else {
                                               return "";
                                           }

                                       }
                                   },

                                   {
                                       "mData": "CreatedAt",
                                       "sTitle": "תאריך הזנה",
                                       "mRender": function (a) { return mRenderDate(a); }
                                   },
                                  {

                                      "sWidth": "10%",
                                      "mData": null, "sTitle": "",
                                      "bSortable": false,
                                      "mRender": function (a, b, c) {
                                          var html = '<a href="#up" class="btn" onclick=deleteRow(' + c.ID + ') title="מחק"><i class="fa fa-times"></i></a>';
                                          html += "<a class='edit fa fa-pencil-square-o' title='ערוך'></a>";
                                          return html;
                                      },
                                      "mRenderEdit": function (a, b, c) {
                                          var html = "<a class='update fa fa-check' title='שמור'></a>"
                                          html += " <a class='cancel fa fa-undo' title='בטל'></a>";
                                          return html;
                                      }
                                  },



                    ],
                    "fnServerData": function (sSource, aoData, fnCallback) {
                        console.log("ao");
                        console.log(aoData);
                        $.ajax({
                            "dataType": 'json',
                            "type": "POST",
                            "url": sSource,
                            "data": aoData,
                            "success": fnCallback
                        });
                    },
                });

                oTable.closest('.dataTables_wrapper').find('.dataTables_table_wrapper');
                selectType.change(function () {
                    oTable.fnDraw();
                });
                selectSubType.change(function () {
                    oTable.fnDraw();
                });

                chkEssenseOnly.change(function () {
                    oTable.fnDraw();
                });
                chkExpiredOnly.change(function () {
                    oTable.fnDraw();
                })
                chkFileOnly.change(function () {
                    oTable.fnDraw();
                })
                chkSiteOnly.change(function () {
                    oTable.fnDraw();
                })
                chkOpenOnly.change(function () {
                    oTable.fnDraw();
                })
                fromDate.change(function () {
                    oTable.fnDraw();
                })
                toDate.change(function () {
                    oTable.fnDraw();
                })


                function dt_subtype_select() {
                    $('#dt_subtype').select2({
                        width: 200,
                        placeholder: "הכל",
                        allowClear: true,
                        initSelection: function (element, callback) {
                            $.ajax({
                                url: '@Url.Content("~/JsonResults/EventSubTypesInitJson")',
                                type: "GET",
                                data: { value: $(element).val() },
                                dataType: "json"
                            }).done(function (data) {
                                if (data && data.length == 1) {
                                    callback(data[0]);
                                }
                            });
                        },
                        ajax: {
                            url: '@Url.Content("~/JsonResults/GetEventSubTypesJson")',
                            dataType: "json",
                            data: function (term, page) {
                                return {
                                    typeId: $('#dt_type').select2('val'),
                                    q: term, // search term
                                    page: page,
                                    page_limit: 10,
                                    val: this.val()
                                };
                            },
                            results: function (data, page) {
                                return {
                                    results: $.map(data.results, function (a) { return { id: a.id, text: a.text } })
                                };
                            }
                        }
                    });
                }


                function dt_type_select() {
                    $('#dt_type').select2({
                        width: 200,
                        placeholder: "לא בוצעה בחירה",
                        initSelection: function (element, callback) {
                            $.ajax({
                                url: '@Url.Content("~/JsonResults/EventTypesInitJson")',
                                type: "GET",
                                data: { value: $(element).val() },
                                dataType: "json"
                            }).done(function (data) {
                                if (data && data.length == 1) {
                                    callback(data[0]);
                                }
                            });
                        },
                        ajax: {
                            url: '@Url.Content("~/JsonResults/GetEventTypesJson_Person")',
                            dataType: "json",
                            data: function (term, page) {
                                return {
                                    q: term, // search term
                                    page: page,
                                    page_limit: 10,
                                    val: this.val()
                                };
                            },
                            results: function (data, page) {
                                return {
                                    results: $.map(data.results, function (a) { return { id: a.id, text: a.text } })
                                };
                            }
                        }
                    });
                }


                function dt_agent_select() {
                    $('#dt_agent').select2({
                        width: 200,
                        placeholder: "לא בוצעה בחירה",
                        initSelection: function (element, callback) {
                            $.ajax({
                                url: '@Url.Content("~/JsonResults/AgentsInitJson")',
                                type: "GET",
                                data: { value: $(element).val() },
                                dataType: "json"
                            }).done(function (data) {
                                if (data && data.length == 1) {
                                    callback(data[0]);
                                }
                            });
                        },
                        ajax: {
                            url: '@Url.Content("~/JsonResults/GetAgentsJson")',
                            dataType: "json",
                            data: function (term, page) {
                                return {
                                    q: term, // search term
                                    page: page,
                                    page_limit: 10,
                                    val: this.val()
                                };
                            },
                            results: function (data, page) {
                                return {
                                    results: $.map(data.results, function (a) { return { id: a.id, text: a.text } })
                                };
                            }
                        }
                    });
                }


                function dt_institute_select() {
                    $('#dt_institute').select2({
                        width: 200,
                        placeholder: "לא בוצעה בחירה",
                        initSelection: function (element, callback) {
                            $.ajax({
                                url: '@Url.Content("~/JsonResults/InstitutesInitJson")',
                                type: "GET",
                                data: { value: $(element).val() },
                                dataType: "json"
                            }).done(function (data) {
                                if (data && data.length == 1) {
                                    callback(data[0]);
                                }
                            });
                        },
                        ajax: {
                            url: '@Url.Content("~/JsonResults/GetInstitutesJson")',
                            dataType: "json",
                            data: function (term, page) {
                                return {
                                    q: term, // search term
                                    page: page,
                                    page_limit: 10,
                                    val: this.val()
                                };
                            },
                            results: function (data, page) {
                                return {
                                    results: $.map(data.results, function (a) { return { id: a.id, text: a.text } })
                                };
                            }
                        }
                    });
                }

                function dates_set_calendar() {
                    $('.datepicker').datepicker({
                        language: 'he',
                        format: 'dd/mm/yyyy',
                        autoclose: true
                    });
                }


                $('#events tbody').on('click', 'tr', function () {
                    if ($(this).hasClass('selected')) {
                        $(this).removeClass('selected');
                    }
                    else {
                        oTable.$('tr.selected').removeClass('selected');
                        $(this).addClass('selected');
                    }
                });

                $('.dataTables_filter').addClass('pull-right');
                $('.dataTables_paginate').addClass('pull-right');

                oTable.on('click', '.edit', function () {
                    var $tr = $(this).closest('tr');
                    var data = oTable.fnGetData($tr.get(0));
                    console.log(data);
                    var settings = oTable.fnSettings();
                    var columns = settings.aoColumns;
                    console.log(columns);
                    var $tds = $tr.find('td');
                    $tds.each(function (i, td) {
                        var col = columns[i];
                        console.log(col);
                        if (col.mRenderEdit) {
                            var $td = $(td);
                            $td.html(col.mRenderEdit(null, null, data));
                        }
                    });
                    dt_type_select();
                    dt_subtype_select();
                    dt_agent_select();
                    dt_institute_select();
                    dates_set_calendar();

                });

                oTable.on('click', '.cancel', function () {
                    oTable.fnDraw(false);
                });



                oTable.on('click', '.update', function () {
                    var settings = oTable.fnSettings();
                    var $tr = $(this).closest('tr');
                    var data = oTable.fnGetData($tr.get(0));
                    console.log('data');
                    console.log(data);
                    var newdata = $.extend({}, data);
                    var columns = settings.aoColumns;

                    var dataParams = [];
                    dataParams.push({ "name": "Id", "value": data.ID });
                    dataParams.push({ "name": "isUpdate", "value": true });
                    console.log(dataParams);
                    alert('ready');
                    $tr.find('td').each(function (i, td) {
                        var col = columns[i];
                       // alert(col.mData);
                        if (col.mData) {
                            switch (col.mData) {
                                case 'SubType_Name': newdata[col.mData] = $("#dt_subtype").val();
                                    //alert(col.mData);
                                    dataParams.push({ "name": "SubType_ID", "value": $("#dt_subtype").val() });
                                    break;
                                case 'Type_Name': newdata[col.mData] = $("#dt_type").val();
                                   // alert(col.mData);
                                    dataParams.push({ "name": "Type_ID", "value": $("#dt_type").select2('val') });
                                    break;
                                case 'Agent_Name': newdata[col.mData] = $("#dt_agent").val();
                                  //  alert(col.mData);
                                    dataParams.push({ "name": "Agent_ID", "value": $("#dt_agent").select2('val') });
                                    break;
                                case 'Institute_Name': newdata[col.mData] = $("#dt_institute").val();
                                   // alert(col.mData);
                                    dataParams.push({ "name": "Institute_ID", "value": $("#dt_institute").select2('val') });
                                    break;
                            }
                        }
                    });

                    console.log('Params');
                    console.log(dataParams);

                    $.ajax({
                        contentType: "application/json; charset=utf-8",
                        type: "GET",
                        dataType: "json",
                        url: '@Url.Action("ChangeEventsData")',
                        data: dataParams
                    }).done(function (data) {
                        oTable.fnUpdate(newdata, $tr.get(0));
                        if (!data.result && data.error != "") {
                            alert(data.error);
                        }
                        else if (!data.result) {
                            alert("הייתה בעיה בשמירת הנתונים");
                        }
                    }).fail(function (jqXHR, textStatus, errorThrown) {
                        console.log(jqXHR);
                        alert("הייתה בעיה בשמירת הנתונים");
                    });
                });



                $('#eventSubTypes tbody').on('click', 'tr', function () {
                    if ($(this).hasClass('selected')) {
                        $(this).removeClass('selected');
                    }
                    else {
                        oTable.$('tr.selected').removeClass('selected');
                        $(this).addClass('selected');
                    }
                });


                $('#exportBtn').click(function () {
                    var location = '@Url.Action("Export", "Events")?';
                    var filterValues = [];
                    filterValues.push({ "name": "Person_ID", "value": person.val() });
                    filterValues.push({ "name": "Type_ID", "value": selectType.select2('val') });
                    filterValues.push({ "name": "SubType_ID", "value": selectSubType.select2('val') });
                    filterValues.push({ "name": "fromDate", "value": fromDate.val() });
                    filterValues.push({ "name": "toDate", "value": toDate.val() });

                    filterValues.push({ "name": "chkEssenseOnly", "value": chkEssenseOnly.is(':checked') });
                    filterValues.push({ "name": "chkExpiredOnly", "value": chkExpiredOnly.is(':checked') });
                    filterValues.push({ "name": "chkOpenOnly", "value": chkOpenOnly.is(':checked') });
                    filterValues.push({ "name": "chkFileOnly", "value": chkFileOnly.is(':checked') });
                    filterValues.push({ "name": "chkSiteOnly", "value": chkSiteOnly.is(':checked') });
                    location += $.param(filterValues);
                    window.location = location;
                });



                $(document).ready(function () {
                    $dialog = $('<div>האם אתה בטוח שברצונך למחוק את הרשימה?<div>').dialog({
                        autoOpen: false,
                        buttons: [
                            {
                                text: "לא",
                                click: function () {
                                    $(this).dialog("close");
                                }
                            },
                            {
                                text: "כן",
                                click: function () {
                                    $(this).dialog("close");
                                    $deletingDialog.dialog("open");
                                    $.ajax({
                                        url: '@Url.Action("Delete")',
                                        type: "POST",
                                        data: { Id: $(this).data('id') },
                                        dataType: "json"
                                    }).done(function (data) {
                                        $deletingDialog.dialog("close");
                                        oTable.fnDraw();
                                        alert(data);
                                    });
                                }
                            }
                        ]
                    });
                    $deletingDialog = $('<div>אנא המתן בזמן שהמחיקה מתבצעת...<div>').dialog({
                        autoOpen: false
                    });
                });
            });

    function selectAll() {
        if ($("#mainSelector").prop('checked')) {
            $(".Selector").prop('checked', true);
        }
        else {
            $(".Selector").prop('checked', false);
        }
    }

    function confirmDelete(id) {
        $dialog.data('id', id).dialog("open");
    }
        </script>
    }


}





