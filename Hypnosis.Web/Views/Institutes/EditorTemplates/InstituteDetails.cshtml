@model Hypnosis.Web.Models.InstituteDetailsModel

<div class="form-inline form-inline-margins">


   
    <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label label-title" })
        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
     </div>
   
</div>

<div class="form-inline form-inline-margins">
    <div class="form-group">
        <label>פרטי קשר</label>
    </div>
</div>
<div class="form-inline form-inline-margins">

    <div class="form-group">
        @Html.LabelFor(model => model.MainPhone, htmlAttributes: new { @class = "control-label label-normal" })
        @Html.EditorFor(model => model.MainPhone, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.MainPhone, "", new { @class = "text-danger" })

    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Phones, htmlAttributes: new { @class = "control-label label-normal" })
        @Html.EditorFor(model => model.Phones, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Phones, "", new { @class = "text-danger" })

    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label label-normal" })
        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.InMailingList, htmlAttributes: new { @class = "control-labe label-normal" })
        @Html.CheckBoxFor(model => model.InMailingList, new { htmlAttributes = new { @class = "form-control" } })
        @*@Html.ValidationMessageFor(model => model.Person_Senior, "", new { @class = "text-danger" })*@
    </div>
</div>
<div class="form-inline form-inline-margins">
    <div class="form-group">
        <label>כתובת לדיוור </label>
    </div>
</div>
<div class="form-inline form-inline-margins">

    <div class="form-group">
        @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label label-normal" })
        @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })

    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Address_Comments, htmlAttributes: new { @class = "control-label label-normal"} )
        @Html.EditorFor(model => model.Address_Comments, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Address_Comments, "", new { @class = "text-danger" })

    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label label-normal" })
        @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })

    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label label-normal" })
        @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
    </div>

</div>

    <div class="form-inline form-inline-margins">
        <div>
            @Html.LabelFor(model => model.Institute_Comments, htmlAttributes: new { @class = "control-label label-bold" })
            @Html.TextAreaFor(model => model.Institute_Comments, new { @class = "text-area-big", @rows = 3 })
        </div>
    </div>
<script lang="javascript">
 tinymce.init({
            menubar: false,
            mode: "textareas",
            directionality: 'rtl',
            encoding: "xml",
            setup: function (editor) {
                editor.on("SaveContent", function (i) {
                    i.content = i.content.replace(/&#39/g, "&apos");
                });
            },
            plugins: [
                "advlist directionality autolink lists link image charmap print preview anchor",
                "searchreplace visualblocks code fullscreen",
                "insertdatetime media table contextmenu paste"
            ],
            toolbar: "insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image"
 });

 </script>